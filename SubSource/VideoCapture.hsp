
*VideoCap

	nidPush

	if (audioDeviceName == ""){
		gsel WND_MAIN
		
		dialog "オーディオデバイスが選択されていません。\n設定画面を開きますか？",2
		if (stat == 6){
			mode = MODE_OPTION
			optionMode = OPMODE_VIDEOCAPTURE
			gosub *drawMainWindow
		
			optionModePrev = 0
			modePrev = mode

			nidPop
			return
		} else {
			LogOut "動画キャプチャを中止しました。"
			nidPop
			return
		}
	}

	if (lateEncodeFlg){

		gosub *VideoCapEmgStop
		
		LogOut "Info-エンコードを中断\n動画キャプチャを取り消しました"
				
		nidPop
		return
	}
		
	
	if (videoCapFlg == FALSE){

		sdim ffbuf, 1024*4
		ResetFFMPEGLog
		apid = 0
		vpid = 0
		pid = 0
		encodeElapsedTime = 0
		encodeSpeed = 0.0
		estimatedTime = 0
		remainingTime = 0
		encodeTime = 0

		GetAbsPos videoCapX, videoCapY
		
		//座標を8のサイズに整形
		videoCapSizeX = int((0.125*sscapwh(0))+0.9999999)*8
		videoCapSizeY = int((0.125*sscapwh(1))+0.9999999)*8

		//音声なしならフラグを立てる
		noAudioFlg = FALSE
		if (audioDeviceName == "音声なし"): noAudioFlg = TRUE

		//x264のプリセットを文字で取得する
		x264presetStr = ""
		notesel x264presetList
		noteget x264presetStr, x264presetNum
		noteunsel
		
		videoFileName = strf("%s\\%s", videoCapSaveDir, DateAndTimeFormat2(saveNameVideoCapture))

		//コマンドの組み立て
		if (noAudioFlg^1){
			//オーデイオあり
			cmda = strf("\"%s\" -vn -f dshow -i audio=\"%s\" -acodec pcm_s16le -ac 2 -ar 44100 \"%s_a.wav\"", ffmpegdir, audioDeviceName, videoFileName)
		} else {
			cmda = strf("cmd")
		}
		
		if (lateEncode){
			//負荷軽減動画キャプチャ
			cmdv  = strf("\"%s\" -an -f gdigrab -draw_mouse %d -show_region %d ", ffmpegdir, videoCapHideCursor^1, videoCapShowFrame)
			cmdv += strf("-video_size %dx%d -offset_x %d -offset_y %d ",videoCapSizeX, videoCapSizeY, videoCapX, videoCapY)
			cmdv += strf("-framerate %d/1 -i desktop -vf fps=%d -pix_fmt yuv420p -c:v libx264 -crf %d -preset %s \"%s_v.mp4\"", videoCapFR, videoCapFR, 12, "ultrafast", videoFileName)
		} else {
			cmdv  = strf("\"%s\" -an -f gdigrab -draw_mouse %d -show_region %d ", ffmpegdir, videoCapHideCursor^1, videoCapShowFrame)
			cmdv += strf("-video_size %dx%d -offset_x %d -offset_y %d ",videoCapSizeX, videoCapSizeY, videoCapX, videoCapY)
			cmdv += strf("-framerate %d/1 -i desktop -vf fps=%d -pix_fmt yuv420p -c:v libx264 -crf %d -preset %s \"%s_v.mp4\"", videoCapFR, videoCapFR, videoCapCRF, x264presetStr, videoFileName)
		}
		
		pipe2exec cmda
		apid = stat
		aStartTime = 0.001*(timeGetTime()\60000)
		wait 20
		pipe2exec cmdv
		vpid = stat
		vStartTime = 0.001*(timeGetTime()\60000)

		if ( (apid == -1) || (vpid == -1) ){
			LogOut "動画キャプチャの開始に失敗しました"
			return
		}

		videoCapFlg = TRUE
		videoCapStartTime = timeGetTime()

		SetTimer WND_INFO(WND_MAIN, WI_HANDLE), VideoCapTimerID, 400, 0

		if (mode == MODE_SSCAP){
			gsel WND_MAIN
			videoCapMes = "停止"
			objprm videoCapBId, videoCapMes
		}
		
		gosub *SSModeControlDisable
		gosub *VideoCapTimerProcessing
	
	} else {

		if (mode == MODE_SSCAP){
			gsel WND_MAIN
			videoCapMes = "中止"
			objprm videoCapBId, videoCapMes
		}
			
		videoCapFlg = FALSE
		KillTimer WND_INFO(WND_MAIN, WI_HANDLE), VideoCapTimerID

		videoCapTime = timeGetTime() - videoCapStartTime

		if (noAudioFlg^1){
			pipe2put apid, "q" //録音の停止
		} else {
			pipe2put apid, "exit\n"
		}
		pipe2put vpid, "q" //動画キャプチャの停止
	
		exf = 0
		exfv = 0
		exfa = 0
		repeat //終了の待機
			if (exfv == 0){
				ffbuf = ""
				pipe2check vpid
				if stat == 0:exfv = 1
				if stat & 2: pipe2get vpid, ffbuf
				if stat & 4: pipe2err vpid, ffbuf
				if (ffbuf != ""){
					strrep ffbuf, "\r", "\n"
					strrep ffbuf, "\r\r", "\r"
					AddFFmpegLog ffbuf
				}
			}
			if (exfa == 0){
				ffbuf = ""
				pipe2check apid
				if stat == 0:exfa = 1
				if stat & 2: pipe2get apid, ffbuf
				if stat & 4: pipe2err apid, ffbuf
				if (ffbuf != ""){
					strrep ffbuf, "\r", "\n"
					strrep ffbuf, "\r\r", "\r"
					AddFFmpegLog "", ffbuf
				}
			}
			if (exfv && exfa): break
			wait 10
		loop

		pipe2term vpid
		pipe2term apid
		
		//エンコードの開始
		LateEncodeFlg = TRUE
		lateEncodeStartTime = timeGetTime()
		diffTime = 1.0*(vStartTime+60.0-aStartTime)\60.0
		//コマンド組み立て
		if (noAudioFlg^1){
			if (lateEncode){
				//オーデイオ有り負荷軽減動画キャプチャ
				cmdm = strf("\"%s\" -i \"%s_v.mp4\" -ss %f -i \"%s_a.wav\" -c:v libx264 -crf %d -preset %s -c:a aac -b:a 128k \"%s.mp4\"", ffmpegdir, videoFileName, difftime, videoFileName, videoCapCRF, x264presetStr, videoFileName)
			} else {
				//オーデイオ有り従来の動画キャプチャ
				cmdm = strf("\"%s\" -i \"%s_v.mp4\" -ss %f -i \"%s_a.wav\" -c:v copy  -c:a aac -b:a 128k \"%s.mp4\"", ffmpegdir, videoFileName, difftime, videoFileName, videoFileName)
			}
		} else {
			if (lateEncode){
				cmdm = strf("\"%s\" -i \"%s_v.mp4\" -c:v libx264 -crf %d -preset %s \"%s.mp4\"", ffmpegdir, videoFileName, videoCapCRF, x264presetStr, videoFileName)
			} else {
				cmdm = strf("\"%s\" -i \"%s_v.mp4\" -c:v copy \"%s.mp4\"", ffmpegdir, videoFileName, videoFileName)
			}
		}
		pipe2exec cmdm
		mpid = stat

		if ( mpid == -1 ){
			
			gosub *VideoCapEmgStop
			LogOut "Error-エンコードプロセスの開始に失敗しました"
				
			nidPop
			return
		}
			
		SetTimer WND_INFO(WND_MAIN, WI_HANDLE), LateEncodeTimerID, 500, 0
		gosub *SSModeControlEnable
		gosub *LateEncodeTimerProcessing

	}
	nidPop
return

*VideoCapTimerProcessing

	logmes "VideoCapTimerProcessing"

	nidPush

	exfv = 0
	exfa = 0

	gsel WND_FFMPEG

	ffbuf = ""
	pipe2check vpid
	if (stat == 0):exfv = 1
	if (stat & 2): pipe2get vpid, ffbuf
	if (stat & 4): pipe2err vpid, ffbuf

	if (ffbuf != ""){
		strrep ffbuf, "\r", "\n"
		strrep ffbuf, "\r\r", "\r"
		AddFFmpegLog ffbuf
	}
	
	ffbuf = ""
	pipe2check apid
	if (stat == 0):exfa = 1
	if (stat & 2): pipe2get apid, ffbuf
	if (stat & 4): pipe2err apid, ffbuf

	if (ffbuf != ""){
		strrep ffbuf, "\r", "\n"
		strrep ffbuf, "\r\r", "\r"
		AddFFmpegLog "", ffbuf
	}

	gsel WND_MAIN
	
	if (exfv || exfa){
		gosub *VideoCapEmgStop
		
		logmessage =  "Error-動画キャプチャを停止しました\n"
		if (exfv): logmessage += "動画プロセスが異常停止しました\n"
		if (exfa): logmessage += "音声プロセスが異常停止しました\n"
		
		LogOut logmessage
		nidPop
		return
	}

	elapsedTime = timeGetTime() - videoCapStartTime
	elapsedTimeStr = "動画をキャプチャ中…\n"
	elapsedTimeStr += strf("  経過時間 %s\n", cnvMilliSecondToMMSSMS(elapsedTime))

	gsel WND_MAIN
	LogOut elapsedTimeStr

	if (enableVideoCapLimit){
		if (videoCapLimitTime < elapsedTime){
			gosub *VideoCap
		}
	}
		
	
	nidPop
return

*LateEncodeTimerProcessing

	nidPush

	exfm = 0

	ffbuf = ""
	pipe2check mpid
	if (stat == 0): exfm = 1
	if (stat & 2): pipe2get mpid, ffbuf
	if (stat & 4): pipe2err mpid, ffbuf

	if (ffbuf != ""){
		strrep ffbuf, "\r", "\n"
		strrep ffbuf, "\r\r", "\r"
		AddFFmpegLog "", "", ffbuf
	}
	
	lastStr = ""
	notesel ffbuf
	noteget lastStr, notemax-1
	noteunsel

	//encodeTime リアルタイムの経過時間
	encodeTime = timeGetTime() - lateEncodeStartTime

	if (strmid(lastStr, 0, 5) == "frame"){
		timeStrIndex = instr(lastStr, 0, "time=")
		if ( timeStrIndex != -1){
			TimeStr = ""
			getstr TimeStr, lastStr, timeStrIndex+5, ' '
			logmes "TimeStr "+TimeStr
			if (instr(TimeStr, 0, ":") == -1){
				encodeElapsedTime = int(double(TimeStr)*1000.0)
				logmes "ss.ms "+encodeElapsedTime
			} else {
				encodeElapsedTime = int(strmid(TimeStr, 0, 2))*3600000 + int(strmid(TimeStr, 3, 2))*60000 + int(double(strmid(TimeStr, 6, 5))*1000.0)
				logmes "HH:MM:ss.ms "+encodeElapsedTime
			}

			encodeElapsedTime += 300

			//エンコードスピード
			encodeSpeed = 1.0*encodeElapsedTime/encodeTime

			logmes "encodeSpeed "+encodeSpeed
			logmes "ffSpeed     "+ffSpeed
			//予想合計エンコード時間
			estimatedTime = 1.0*videoCapTime/encodeSpeed		
		}	
	}

	//予想合計エンコード時間
	remainingTime = estimatedTime-encodeTime
	if (remainingTime < 0.0): remainingTime = 0.0
	
	lateEncodeStr = "動画をエンコード中…\n"
	lateEncodeStr += strf("  経過時間 %s\n", cnvMilliSecondToMMSSMS(encodeTime))
	lateEncodeStr += strf("  推定残り %s", cnvMilliSecondToMMSSMS(remainingTime))

	LogOut lateEncodeStr

	if (exfm){
		lateEncodeFlg = FALSE
		KillTimer WND_INFO(WND_MAIN, WI_HANDLE), LateEncodeTimerID
		
		gosub *VidepCapFinish
		return
	}
	
	nidPop
return


*VidepCapFinish
	nidPush

	exist videoFileName+"_v.mp4"
	if (strsize != -1): delete videoFileName+"_v.mp4"
	exist videoFileName+"_a.wav"
	if (strsize != -1): delete videoFileName+"_a.wav"

	LogOut strf("%s.mp4を保存しました。", getpath(videoFileName, 8))

	if (mode == MODE_SSCAP){
		gsel WND_MAIN
		videoCapMes = "開始"
		objprm videoCapBId, videoCapMes
	}

	gosub *SSModeControlEnable
	
	nidPop
return


*VideoCapEmgStop

	logmes "異常停止の発生"

	videoCapFlg = FALSE
	lateEncodeFlg = FALSE

	KillTimer WND_INFO(WND_MAIN, WI_HANDLE), VideoCapTimerID
	KillTimer WND_INFO(WND_MAIN, WI_HANDLE), LateEncodeTimerID
	if (apid != -1): pipe2term apid
	if (vpid != -1): pipe2term vpid
	if (mpid != -1): pipe2term mpid
	wait 50
	exist videoFileName+"_v.mp4"
	if (strsize != -1): delete videoFileName+"_v.mp4"
	exist videoFileName+"_a.wav"
	if (strsize != -1): delete videoFileName+"_a.wav"
	exist videoFileName+".mp4"
	if (strsize != -1): delete videoFileName+".mp4"

	if (mode == MODE_SSCAP){
		gsel WND_MAIN
		videoCapMes = "開始"
		objprm videoCapBId, videoCapMes
	}
		
	gosub *SSModeControlEnable

return


*VideoCapSetting
	//audioDeviceNameからaudioDeviceListNumを取得するためのサブルーチン
	//起動時に一度だけ呼び出される

	GetAudioDevice ffmpegdir, audioDeviceList
	audioDeviceList += "音声なし"
	audioDeviceListNum = -1
	if (audioDeviceName != ""){
		notesel audioDeviceList
		repeat notemax
			noteget tempStr, cnt
			if (audioDeviceName == tempStr){
				audioDeviceListNum = cnt
				break
			}
		loop
		noteunsel
		if (audioDeviceListNum == -1){
			audioDeviceName = ""
		}
	}
	
return

*SetAudioDeviceName
	//リストボックスをクリックした時に呼び出されるサブルーチン
	//WindowMessageEventからクリックするたびに呼び出される

	sendmsg hAudioDeviceLB, LB_GETCURSEL
	audioDeviceListNum = stat
	notesel audioDeviceList
	noteget audioDeviceName, audioDeviceListNum
	noteunsel

	logmes "audioDeviceName :"+audioDeviceName
	
return


*openDialogffmpeg
	//ffmpeg探すダイアログを開くためのサブルーチン
	//ボタンを押す度に呼び出される

	nidPush

	gsel WND_MAIN

	dialog "exe", 16, "ffmpeg.exe"
	if (stat==1){
		ffmpegdir = refstr
	} else {
		ffmpegdir = ""
	}
	
	objprm ffmpegDirIId, ffmpegdir

	GetAudioDevice ffmpegdir, audioDeviceList
	audioDeviceList += "音声なし"
	objprm audioDeviceLBId, audioDeviceList
	audioDeviceListNum = -1
	audioDeviceName = ""
	sendmsg hAudioDeviceLB, LB_SETCURSEL, audioDeviceListNum, 0

	nidPop

return