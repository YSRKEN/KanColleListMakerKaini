*MainWindowProc
	oncmd 0

	switch iparam

		case WM_DROPFILES
			logmes "WM_DROPFILES"
			gosub *OnDropFiles
			swbreak
			
		case WM_COMMAND
			logmes "WM_COMMAND"
			gosub *WM_COMMAND_Proc
			swbreak

		case WM_HOTKEY
			logmes "WM_HOTKEY"
			gosub *hotkey
			swbreak

		case WM_TIMER
			logmes "WM_TIMER"
			gosub *WM_TIMER_Proc
			swbreak

		case WM_VSCROLL
			logmes "WM_VSCROLL"
			gosub *WM_VSCROLL_Proc
			swbreak

		case WM_DPICHANGED
			logmes "WM_DPICHANGED"
			gosub *DPICHANGED
			swbreak

		case WM_LBUTTONDOWN
			logmes "WM_LBUTTONDOWN"
			gosub *mainWndMove
			swbreak

		case WM_LBUTTONDBLCLK
			logmes "WM_LBUTTONDBLCLK"
			gosub *windowsSizeChange
			swbreak

	swend

	oncmd 1
return


*GridWindowProc
	oncmd 0

	switch iparam
	
		case WM_DROPFILES
			gosub *OnDropFiles
			swbreak
			
		case WM_SIZING
			gosub *windowsize
			swbreak

		case WM_LBUTTONDOWN
			gosub *ListDrag
			swbreak

	swend

	oncmd 1
return 



*WM_COMMAND_Proc
	

	//コンボボックスによるモード切替の発生
	if (lparam = hComBox) & (((wparam>>16) & 0x0000FFFF) = 1){

		logmes "ComBox"
	
		if (modePrev == MODE_OPTION){
			gosub *dataCheck
			gosub *inisave
			gosub *hotkeycapsetting
			gosub *twiinit
		}

		sendmsg hCombox, CB_GETCURSEL
		mode_ = stat
		optionMode = 0

		switch mode_
			case 0
				mode = MODE_SSCAP
				swbreak
			case 1
				listmode = LISTMODE_LIST
				mode = MODE_LIST
				swbreak
			case 2
				listmode = LISTMODE_FLEET
				mode = MODE_LIST
				swbreak
			case 3
				listmode = LISTMODE_OTHER
				mode = MODE_LIST
				swbreak
			case 4
				mode = MODE_OPTION
				swbreak
		swend

		if (mode != modePrev || listMode != listModePrev || optionMode != optionModePrev){

			if (mode = MODE_OPTION){
				if enabletweetwindow {
					gsel WND_TWITTER, -1
				}
			} else {
				if enabletweetwindow {
					gsel WND_TWITTER, 1+twiFrontRow
				}

			}
					
			gosub *CalcCapPosAndWinSize
			gosub *DrawMainWindow
		}

	}

	//オプションモード切替コンボボックスによるオプションモード切替の発生
	if (lparam = hOptionComBox) & (((wparam>>16) & 0x0000FFFF) = 1){
		
		logmes "OptionComBox"
		
		sendmsg hOptionComBox, CB_GETCURSEL
		optionMode = stat

		if (optionMode != optionModePrev){
			gosub *drawMainWindow
		}
		
	}

	//モードがオプションモードでないとき
	if (mode != MODE_OPTION){
		
		//ツイートウィンドウ表示のチェックボックスが押された時
		if (lparam == enabletweetwindowch && enabletweetwindowch != 0){
			
			sendmsg enableTweetWindowCh, $F2
			enableTweetWindow = stat & 0x01
			
			if enabletweetwindow {
				gsel WND_TWITTER, 1+twiFrontRow
			} else {
				gsel WND_TWITTER, -1
			}
			
		}

		if (mode == MODE_LIST){

			//一覧作成モードでチェックボックスのオンオフで動的に画面を切り替えるための判定処理
			logmes "リストチェンジ前判定 Index" + DAControlIndex
			listChangef = FALSE
			repeat DAControlIndex
				if (lparam == DAControlArr(cnt)){
					logmes "ヒット cnt:"+cnt
					listChangef = TRUE
					break
				}
			loop
			if listChangef: gosub *listchange
		}
		
	}

	if (mode == MODE_OPTION){
		//オプションモードのとき
		
		//UIスケールの自動設定周り
		if (optionMode == OPMODE_CONFIG){
			if (lparam = autoUIScaleCh){
				sendmsg autoUIScaleCh, $F2
				autoUIScale = stat & 0x01

				gosub *calcUIScale

				enableWindow hTrackbar, autoUIScale^1
				enableWindow hTrackBarScale, autoUIScale^1
				sendmsg hTrackbar, TBM_SETPOS, 1, int(UIScale*100)
				sendmsg hTrackBarScale, $C ,, strf("%d%% ", int(UIScale*100))

			}
		}

		if (optionMode == OPMODE_VIDEOCAPTURE){
			if ( (lparam == hAudioDeviceLB) && (((wparam>>16) & 0x0000FFFF) == 1) ){
				gosub *SetAudioDeviceName
			}
		}
		
	}

return

*listchange
	debugLog "リストチェンジ 開始"

	nidPush
	gsel WND_MAIN
	
	if (listMode == LISTMODE_LIST){

		sendmsg ichiranMode1Ch, $F2
		ichiranMode1 = stat & 0x01
		sendmsg ichiranMode2Ch, $F2
		ichiranMode2 = stat & 0x01

		if ichiranMode1 {
		
			lvnamef = lvname
			sendmsg yubiwach, $F2
			yubiwa = stat & 0x01
			sendmsg kantaich, $F2
			kantai = stat & 0x01
			sendmsg pagech, $F2
			page = stat & 0x01
			sendmsg lvnamech, $F2
			lvname = stat & 0x01
			
			objenable lvnamecid,1
			
			if lvname = 1{
				objenable yubiwacid,0
				objenable kantaicid,0
				objenable pagecid,0
			} else {
				objenable yubiwacid,1
				objenable kantaicid,1
				objenable pagecid,1
			}
			
		}

		if ichiranMode2 {

			objenable yubiwacid,0
			objenable kantaicid,0
			objenable pagecid,0
			objenable lvnamecid,0
			
		}
		
	}
	
	
	if (listMode == LISTMODE_FLEET){
	
		sosuf = sosu
		sendmsg sosukach, $F2
		sosuka = stat & 0x01
		sendmsg sosuch, $F2
		sosu = stat & 0x01
		sendmsg sokach, $F2
		soka = stat & 0x01
	
		sendmsg tuika1ch, $F2
		tuika1 = stat & 0x01
		sendmsg tuika2ch, $F2
		tuika2 = stat & 0x01
		sendmsg tuika3ch, $F2
		tuika3 = stat & 0x01
		sendmsg tuika4ch, $F2
		tuika4 = stat & 0x01
	
		sendmsg listsize1ch, $F2
		listsize1 = stat & 0x01
		sendmsg listsize2ch, $F2
		listsize2 = stat & 0x01
	
		sendmsg fleetPunctuationch, $F2
		fleetPunctuation = stat & 0x01
	}

	if (listMode == LISTMODE_OTHER){

		sendmsg directLinkCh, $F2
		directLink = stat & 0x01
		sendmsg airStationCh, $F2
		airStation = stat & 0x01
		sendmsg airStationTabCh, $F2
		airStationTab = stat & 0x01
		
		sendmsg equipmentListCh, $F2
		equipmentList = stat & 0x01
		sendmsg sceneKaisoCh, $F2
		sceneKaiso = stat & 0x01
		sendmsg sceneHaikiCh, $F2
		sceneHaiki = stat & 0x01
		sendmsg includeDetailsCh, $F2
		includeDetails = stat & 0x01


		if (airStation) {
			objenable airStationTabCId, 1
		} else {
			objenable airStationTabCId, 0
		}

		if (equipmentList) {
			objenable sceneKaisoCId, 1
			objenable sceneHaikiCId, 1
			objenable includeDetailsCId, 1
		} else {
			objenable sceneKaisoCId, 0
			objenable sceneHaikiCId, 0
			objenable includeDetailsCId, 0

		}

		
	}


	gosub *CalcCapPosAndWinSize

	gsel WND_GRID
	width scrsize(0),scrsize(1)

	gosub *draw

	nidPop
	debugLog "リストチェンジ 終了"
return


*windowsize

	dupptr left,   lparam,    4
	dupptr top,    lparam+4,  4
	dupptr right,  lparam+8,  4
	dupptr bottom, lparam+12, 4

	switch wparam
	case 1
	case 2
	case 7
	case 8
		bottom = top + round(AspectRatio * (right - left - framesx)) + framesy
		swbreak
	case 3
	case 5
	case 6
		right = left + round(1.0/AspectRatio * (bottom - top - framesy)) + framesx
		swbreak
	case 4
		left = right - round(1.0/AspectRatio * (bottom - top - framesy)) - framesx
		swbreak
	swend

	scrsize(0) = ginfo_winx ,round(AspectRatio*ginfo_winx)
	cellsize(0) = round(1.0*scrsize(0) / (cellnum(0)+1)) ,round(1.0*scrsize(1) / (cellnum(1)+1))
	
	gosub *draw
	
return

//ドロップ処理――――――――――――――――――――――――――――――――――
*OnDropFiles
	debugLog "ドロップ処理 開始"

	if ( ginfo_intid == WND_MAIN && mode != MODE_LIST ){
		return
	}
	
	if ( ginfo_intid == WND_MAIN || ginfo_intid == WND_GRID ){

		debugLog "    メインかグリッドウィンドウにドロップされた"
		nidPush
		dropWindowId = ginfo(24)
		hdrop = wParam
		sdim dropfile,1024
		DragQueryFile hdrop, 0, varptr(dropfile), 260
		dropFile = cnvwtos(dropFile)
		dim dragPoint,2
		DragQueryPoint hdrop, varptr(dragPoint)
		DragFinish hdrop
		if peek(dropfile,0) = '"' : getstr dropfile, dropfile, 1, '"'
		
		if ImgF_GetFormat(dropfile) = 0{
			nidPop
			return
		}

		dropFlag = TRUE
		addfilename = dropfile
		gosub *addCapture

		addfilename = ""
		dropFlag = FALSE
		nidPop
	}
	
	if (ginfo_intid == WND_TWITTER){

		debugLog "    ツイートウィンドウにドロップされた"
		nidPush
	
		hdrop = wParam
		sdim dropfile,1024
		DragQueryFile hdrop, 0, varptr(dropfile), 1024
		DragFinish hdrop
		dropFile = cnvwtos(dropFile)
		if peek(dropfile,0) = '"' : getstr dropfile, dropfile, 1, '"'
		
		if (ImgF_GetFormat(dropfile) == 0){
			nidPop
			return
		}

		picHistoryLoad dropfile
		
		gosub *picHistoryTop
		gosub *picHistoryAddStack
	
		nidPop
	
	}
	
	debugLog "ドロップ処理 終了"
return

*WM_VSCROLL_Proc
	//トラックバーを動かしたときの処理
	nidPush
	
	if (lparam == hTrackbar) {
		
		sendmsg hTrackbar, TBM_GETPOS
		tempint = stat
		
		sendmsg hTrackBarScale, $C ,, strf("%d%% ",tempint)
		UIScale = (0.01 * tempint)

		scale3 = Scale(3)
		scale5 = Scale(5)
		scale20 = Scale(20)

		repeat 5
			twiPicFrameXL(cnt) = Scale(_twiPicFrameXL(cnt))
			twiPicFrameXR(cnt) = Scale(_twiPicFrameXR(cnt))
			twiPicFrameYU(cnt) = Scale(_twiPicFrameYU(cnt))
			twiPicFrameYD(cnt) = Scale(_twiPicFrameYD(cnt))
		loop
	}

	if (lparam == hMaxSearchLevelTrackbar && wparam == 0x0008) {
		
		sendmsg hMaxSearchLevelTrackbar, TBM_GETPOS
		maxSearchLevel = stat

		if (maxSearchLevelPrev != maxSearchLevel){
			
			maxSearchLevelPrev = maxSearchLevel
			sendmsg hMaxSearchLevelStatic , WM_SETTEXT, , maxSearchLevelStr(maxSearchLevel)
			autoSearchFailureCount = 0

			if (availableCap){

				if (positionType != PT_ABSOLUTE){
					scrPoint = sscap(0), sscap(1)
					ClientToScreen hClient, varptr(scrPoint)
					sscap(0) = scrPoint(0)
					sscap(1) = scrPoint(1)
					sscap(2) = scrPoint(0)+sscapwh(0)
					sscap(3) = scrPoint(1)+sscapwh(1)
				}
			
				gosub *CaptureMethodDecide
				gosub *SSSettingCheck
			}
		}
	}
	
	nidPop
return

*DPICHANGED
	debugLog "DPI変更のウィンドウメッセージ 開始"
	nidPush
	
	if autoUIScale {
		
		logmes "WM_DPICHANGED"
		
		DPI = HIWORD(wparam)

		debugLog "    変更後DPI:"+DPI
		
		UIScale = 1.0 * DPI / 96.0
	
		scale3 = Scale(3)
		scale5 = Scale(5)
		scale20 = Scale(20)
	
		repeat 5
			twiPicFrameXL(cnt) = Scale(_twiPicFrameXL(cnt))
			twiPicFrameXR(cnt) = Scale(_twiPicFrameXR(cnt))
			twiPicFrameYU(cnt) = Scale(_twiPicFrameYU(cnt))
			twiPicFrameYD(cnt) = Scale(_twiPicFrameYD(cnt))
		loop

		gosub *drawMainWindow

		if (enableTweetWindow == TRUE){
			gosub *twiInit
		}
		gosub *DrawSupportWnd
	} else {
		debugLog "    DPI自動設定がOFFの為変更無し"
	}
	
	nidPop

	debugLog "DPI変更のウィンドウメッセージ 終了"
return

*mainWndMove
	//タイトルバー以外の部分をクリックしてもメインウィンドウを移動できるようにするための処理
	if (wparam == 1) {
		sendmsg WND_INFO(WND_MAIN, WI_HANDLE), WM_NCLBUTTONDOWN, HTCAPTION, 0
	}
return

*calcUIScale

	DPI = GetDeviceCaps(hdc, 88)
	if autoUIScale {
		UIScale = 1.0 * DPI / 96.0
	}
				
	scale3 = Scale(3)
	scale5 = Scale(5)
	scale20 = Scale(20)
				
	repeat 5
		twiPicFrameXL(cnt) = Scale(_twiPicFrameXL(cnt))
		twiPicFrameXR(cnt) = Scale(_twiPicFrameXR(cnt))
		twiPicFrameYU(cnt) = Scale(_twiPicFrameYU(cnt))
		twiPicFrameYD(cnt) = Scale(_twiPicFrameYD(cnt))
	loop

	gosub *DrawSupportWnd
	
return

*WM_TIMER_Proc

	switch wparam
		case timerID
			gosub *ssCapture
			swbreak
			
		case timer2ID

			/////////////
			nidPush

			if availableCap{
				if (sscapwh(0) >= 99) & (sscapwh(1) >= 59){

					logmes "ginfo_act :"+ginfo_act

					if (ginfo_act == -1 || ginfo_act == WND_SUPPORT){

						switch positionType
						
							case PT_ABSOLUTE
								gsel WND_SUPPORT, 2
								MoveWindow WND_INFO(WND_SUPPORT, WI_HANDLE), sscap(0)+sscapwh(0)-supportWndW,sscap(1)+sscapwh(1), supportWndW, supportWndH ,1
								swbreak	
	
							case PT_RELATIVE
								
								dim point, 2
								point = ssCap(0), ssCap(1)
								ClientToScreen hClient, varptr(point)
				
								gsel WND_SUPPORT, 2
								MoveWindow WND_INFO(WND_SUPPORT, WI_HANDLE), point(0)+sscapwh(0)-supportWndW,point(1)+sscapwh(1), supportWndW, supportWndH ,1
								swbreak	
						swend
					}

				} else {
					gsel WND_SUPPORT, -1
				}
				
			} else {
				gsel WND_SUPPORT, -1
			}

			nidPop
			/////////////
			swbreak

		case VideoCapTimerID
			gosub *VideoCapTimerProcessing
			swbreak

		case LateEncodeTimerID
			gosub *LateEncodeTimerProcessing
			swbreak
	swend


return 0