#module VersionCheck

#uselib "wininet.dll"
#cfunc _InternetOpen "InternetOpenW" int, int, int, int, int
#func _InternetReadFile "InternetReadFile" int, int, int, int
#func _InternetWriteFile "InternetWriteFile" int, int, int, int
#func _InternetCloseHandle "InternetCloseHandle" int
#cfunc _InternetConnect "InternetConnectW" int, wptr, int, int, int, int, int, int
#cfunc _HttpOpenRequest "HttpOpenRequestW" int, wptr, wptr, wptr, wptr, wptr, int, int
#cfunc _HttpSendRequest "HttpSendRequestW" int, wptr, int, wptr, int
#cfunc _HttpEndRequest "HttpEndRequestW" int, int, int, int
#cfunc _HttpQueryInfo "HttpQueryInfoW" int, int, wptr, int, int
#func _InternetQueryDataAvailable "InternetQueryDataAvailable" int, int, int, int
#func _InternetSetOption "InternetSetOptionW" int, int, int, int

#define INTERNET_OPEN_TYPE_PRECONFIG            0
#define INTERNET_OPEN_TYPE_DIRECT               1
#define INTERNET_OPTION_CONNECT_TIMEOUT         2
#define INTERNET_OPTION_HTTP_DECODING           65
#define INTERNET_DEFAULT_HTTP_PORT              80
#define INTERNET_DEFAULT_HTTPS_PORT             443
#define INTERNET_SERVICE_HTTP                   3
#define INTERNET_FLAG_RELOAD                    0x80000000
#define INTERNET_FLAG_SECURE                    0x00800000
#define INTERNET_FLAG_NO_CACHE_WRITE            0x04000000
#define INTERNET_FLAG_DONT_CACHE                INTERNET_FLAG_NO_CACHE_WRITE
#define INTERNET_FLAG_IGNORE_CERT_DATE_INVALID  0x00002000
#define INTERNET_FLAG_IGNORE_CERT_CN_INVALID    0x00001000

#define HTTP_QUERY_MIME_VERSION 0
#define HTTP_QUERY_CONTENT_TYPE 1
#define HTTP_QUERY_CONTENT_TRANSFER_ENCODING 2
#define HTTP_QUERY_CONTENT_ID 3
#define HTTP_QUERY_CONTENT_DESCRIPTION 4
#define HTTP_QUERY_CONTENT_LENGTH 5
#define HTTP_QUERY_CONTENT_LANGUAGE 6
#define HTTP_QUERY_ALLOW 7
#define HTTP_QUERY_PUBLIC 8
#define HTTP_QUERY_DATE 9
#define HTTP_QUERY_EXPIRES 10
#define HTTP_QUERY_LAST_MODIFIED 11
#define HTTP_QUERY_MESSAGE_ID 12
#define HTTP_QUERY_URI 13
#define HTTP_QUERY_DERIVED_FROM 14
#define HTTP_QUERY_COST 15
#define HTTP_QUERY_LINK 16
#define HTTP_QUERY_PRAGMA 17
#define HTTP_QUERY_VERSION 18
#define HTTP_QUERY_STATUS_CODE 19
#define HTTP_QUERY_STATUS_TEXT 20
#define HTTP_QUERY_RAW_HEADERS 21
#define HTTP_QUERY_RAW_HEADERS_CRLF 22
#define HTTP_QUERY_CONNECTION 23
#define HTTP_QUERY_ACCEPT 24
#define HTTP_QUERY_ACCEPT_CHARSET 25
#define HTTP_QUERY_ACCEPT_ENCODING 26
#define HTTP_QUERY_ACCEPT_LANGUAGE 27
#define HTTP_QUERY_AUTHORIZATION 28
#define HTTP_QUERY_CONTENT_ENCODING 29
#define HTTP_QUERY_FORWARDED 30
#define HTTP_QUERY_FROM 31
#define HTTP_QUERY_IF_MODIFIED_SINCE 32
#define HTTP_QUERY_LOCATION 33
#define HTTP_QUERY_ORIG_URI 34
#define HTTP_QUERY_REFERER 35
#define HTTP_QUERY_RETRY_AFTER 36
#define HTTP_QUERY_SERVER 37
#define HTTP_QUERY_TITLE 38
#define HTTP_QUERY_USER_AGENT 39
#define HTTP_QUERY_WWW_AUTHENTICATE 40
#define HTTP_QUERY_PROXY_AUTHENTICATE 41
#define HTTP_QUERY_ACCEPT_RANGES 42
#define HTTP_QUERY_SET_COOKIE 43
#define HTTP_QUERY_COOKIE 44
#define HTTP_QUERY_REQUEST_METHOD 45
#define HTTP_QUERY_MAX 45
#define HTTP_QUERY_CUSTOM 65535
#define HTTP_QUERY_FLAG_REQUEST_HEADERS 0x80000000
#define HTTP_QUERY_FLAG_SYSTEMTIME 0x40000000
#define HTTP_QUERY_FLAG_NUMBER 0x20000000
#define HTTP_QUERY_FLAG_COALESCE 0x10000000
#define HTTP_QUERY_MODIFIER_FLAGS_MASK (HTTP_QUERY_FLAG_REQUEST_HEADERS|HTTP_QUERY_FLAG_SYSTEMTIME|HTTP_QUERY_FLAG_NUMBER|HTTP_QUERY_FLAG_COALESCE)
#define HTTP_QUERY_HEADER_MASK (~HTTP_QUERY_MODIFIER_FLAGS_MASK)


#deffunc VerCheckInit
	//各種変数の初期化
	responseHeader = ""
	responseBody = ""
	timeOutTime = 2000
	gzipFlag = 1 // true /-------------------
	//インターネットオープン
	hInet = _InternetOpen( p1, INTERNET_OPEN_TYPE_PRECONFIG, 0, 0, 0)
	if hInet = 0:return -1
	_InternetSetOption hInet, INTERNET_OPTION_CONNECT_TIMEOUT, varptr(timeOutTime), 4
	_InternetSetOption hInet, INTERNET_OPTION_HTTP_DECODING, varptr(gzipFlag), 4
return 0

#deffunc VerCheckWash
	//ハンドルの破棄
	if (hRequest) : _InternetCloseHandle hRequest
	if (hConnect) : _InternetCloseHandle hConnect
	if (hInet) : _InternetCloseHandle hInet
return

#deffunc execVerCheck

	hConnect = 0	// InternetConnectのハンドル
	hRequest = 0	// HttpOpenRequestのハンドル
	statcode = 0	// リクエストの結果コード
	dataLength = 0	// データ長
	rsize = 1024	// バッファ初期値
	hsize = 0		// 取得したバイト数が代入される変数
	
	RequestURL = "drive.google.com"
	sdim RequestURLWide, 1024
	cnvstow RequestURLWide, RequestURL

	apiUrl = "uc?export=download&id=0BxC9-Nilt2alT1JlVG9MNlE4OWM"
	sdim apiUrlWide, 1024
	cnvstow apiUrlWide, apiUrl
	
	usePort = 443
	requestFlag  = INTERNET_FLAG_RELOAD
	requestFlag |= INTERNET_FLAG_DONT_CACHE
	requestFlag |= INTERNET_FLAG_IGNORE_CERT_DATE_INVALID
	requestFlag |= INTERNET_FLAG_IGNORE_CERT_CN_INVALID
	requestFlag |= INTERNET_FLAG_SECURE

	method = "GET"
	sdim methodWide, 1024
	cnvstow methodWide, method

	httpVer = "HTTP/1.1"
	sdim httpVerWide, 1024
	cnvstow httpVerWide, httpVer

	RequestHeader = "Accept-Encoding: gzip, deflate;\nContent-Type: application/x-www-form-urlencoded"
	sdim RequestHeaderWide, 1024
	cnvstow RequestHeaderWide, RequestHeader
	RequestHeaderWideLength = stat
	PostDataWide = ""
	PostDataWideLength = 0
	
	//サーバへ接続
	hConnect = _InternetConnect(hInet, varptr(RequestURLWide), INTERNET_DEFAULT_HTTPS_PORT, 0, 0, INTERNET_SERVICE_HTTP, 0, 0)
	if (hConnect = 0) {
		//Connectハンドルを取得できなかった場合
		return -4
	}
	
	//リクエストの初期化
	hRequest = _HttpOpenRequest(hConnect, varptr(methodWide), varptr(apiUrlWide), varptr(httpVerWide), 0, 0, requestFlag, 0)
	if (hRequest = 0) {
		//Requestハンドルを取得できなかった場合
		_InternetCloseHandle hConnect
		return -3
	}
	
	//サーバへリクエスト送信
	if ( _HttpSendRequest(hRequest, varptr(RequestHeaderWide), RequestHeaderWideLength, varptr(PostDataWide), PostDataWideLength)) {
		//ヘッダを取得する変数の初期化
		responseHeaderSize = 1024*4
		sdim responseHeaderWide, responseHeaderSize*2+2
		//ヘッダの取得
		if ( _HttpQueryInfo(hRequest, HTTP_QUERY_RAW_HEADERS_CRLF, varptr(responseHeaderWide), varptr(responseHeaderSize), 0) ) {
			//ヘッダの解析
			sdim responseHeader, responseHeaderSize
			responseHeader = cnvwtos(responseHeaderWide)
			notesel responseHeader
			repeat notemax
				noteget headerLine, cnt
				headerTokenPos = instr(headerLine, 0, "HTTP/1.1 ")				//ステータスコード
				if (headerTokenPos != -1) : statcode = int(strmid(headerLine, headerTokenPos+9, 3))
				headerTokenPos = instr(headerLine, 0, "Content-Length: ")		//長さ
				if (headerTokenPos != -1) : responseBodyLength = int(strmid(headerLine, -1, strlen(headerLine)-(headerTokenPos+16)))
			loop
			noteunsel
			if (statCode == 200 && responseBodyLength > 0){
				logmes "responseBodyLength :"+responseBodyLength
				//入手可能なデータ量を取得
				_InternetQueryDataAvailable hRequest, varptr(rsize), 0, 0
				//バッファの初期化
				logmes "srize : "+ rsize
				sdim responseBuffer, rsize+1
				sdim responseBody, responseBodyLength+1
				repeat 
					_InternetReadFile hRequest, varptr(responseBuffer), rsize, varptr(hsize)
					if (hsize = 0) : break 
					responseBody += strmid(responseBuffer, 0, hsize)
				loop
			}
		} else {
			//ヘッダの取得ができなかった場合
			return -1
		}
		//Requestハンドルの破棄
		_InternetCloseHandle hRequest
	} else {
		//サーバへリクエスト送信できなかった場合
		return -2
	}
return statcode

#defcfunc getResponse
return responseBody

#global


*VerCheck

	if autoVersionCheck {

		VerCheckInit
		logOut "バージョンチェック中です。":await
		
		execVerCheck
		if (stat == 200){
			logmes "アップデートファイルの取得成功"
			sdim json,1024*4
			json = getResponse()
			json_sel json
			
			logmes "取得したバージョン " + json_val("[0].version")
			if (klm2ver < int(json_val("[0].version"))){
				
				sdim text,1024
				text =  "艦これ一覧めいかー改二の最新版"+json_val("[0].versionstr")+"が公開されています\n"
				text += json_val("[0].comment")
				text += "\nダウンロードページを開きますか？"
				
				dialog text,2,"最新版が公開されています"
				if stat = 6{
					exec ""+json_val("[0].distributionurl"),16
				}
			}
			json_unsel
			sdim json
			sdim text
		} else {
			logmes "アップデートファイルの取得失敗"
			dialog "次の原因が考えられます\nアップデート情報配信サーバーのダウン\nインターネット未接続",0,"アップデート情報の取得に失敗しました"
		}
		VerCheckWash

		if (mode == MODE_SSCAP){
			logmessage = "バージョンチェックが完了しました。"
			objprm logId, logMessage
		}
		
		debugLog "バージョンチェック 終了"
	}

return