#module VersionCheck

#uselib "wininet.dll"
#func InternetOpen "InternetOpenW" wptr, wptr, wptr, wptr, wptr
#func InternetConnect "InternetConnectW" wptr, wptr, wptr, wptr, wptr, wptr, wptr, wptr
#func InternetQueryDataAvailable "InternetQueryDataAvailable" wptr, wptr, wptr, wptr
#func InternetSetOption "InternetSetOptionW" wptr, wptr, wptr, wptr
#func InternetQueryOption "InternetQueryOptionW" wptr, wptr, wptr, wptr
#func InternetReadFile "InternetReadFile" wptr, wptr, wptr, wptr
#func InternetWriteFile "InternetWriteFile" wptr, wptr, wptr, wptr
#func InternetCloseHandle "InternetCloseHandle" wptr
#func HttpOpenRequest "HttpOpenRequestW" wptr, wptr, wptr, wptr, wptr, wptr, wptr, wptr
#func HttpSendRequest "HttpSendRequestW" wptr, wptr, wptr, wptr, wptr
#func HttpQueryInfo "HttpQueryInfoW" wptr, wptr, wptr, wptr, wptr

#define INTERNET_OPEN_TYPE_PRECONFIG            0
#define INTERNET_OPEN_TYPE_DIRECT               1
#define INTERNET_OPTION_CONNECT_TIMEOUT         2
#define INTERNET_OPTION_CONNECT_RETRIES			3
#define INTERNET_OPTION_SEND_TIMEOUT            5
#define INTERNET_OPTION_RECEIVE_TIMEOUT			6
#define INTERNET_OPTION_HTTP_DECODING           65
#define INTERNET_DEFAULT_HTTP_PORT              80
#define INTERNET_DEFAULT_HTTPS_PORT             443
#define INTERNET_SERVICE_HTTP                   3
#define INTERNET_FLAG_RELOAD                    0x80000000
#define INTERNET_FLAG_SECURE                    0x00800000
#define INTERNET_FLAG_NO_CACHE_WRITE            0x04000000
#define INTERNET_FLAG_DONT_CACHE                INTERNET_FLAG_NO_CACHE_WRITE
#define INTERNET_FLAG_IGNORE_CERT_DATE_INVALID  0x00002000
#define INTERNET_FLAG_IGNORE_CERT_CN_INVALID    0x00001000

#define HTTP_QUERY_STATUS_CODE 19
#define HTTP_QUERY_FLAG_NUMBER 0x20000000

#deffunc execVerCheck

	sdim RequestHeader
	sdim responseBody
	hInet = 0		// InternetOpenのハンドル
	hConnect = 0	// InternetConnectのハンドル
	hRequest = 0	// HttpOpenRequestのハンドル
	statcode = 0	// リクエストの結果コード
	rsize = 1024	// バッファ初期値
	hsize = 0		// 取得したバイト数が代入される変数
	intSize = 4		// int型の大きさ
	connTimeOut = 1000
	sendTimeOut = 1000
	receiveTimeOut = 1000
	connRetry = 2

	method = "GET"
	httpVer = "HTTP/1.1"
	serverName = "drive.google.com"
	apiUrl = "uc?export=download&id=0BxC9-Nilt2alT1JlVG9MNlE4OWM"

	RequestHeader  = "Host: "+serverName+"\n"
	RequestHeader += "Accept: text/json; application/json; charset=UTF-8\n"
	RequestHeader += "User-Agent: KanColleListMakerKaini\n"
	RequestHeader += "Connection: close\n"

	usePort = 443
	requestFlag  = INTERNET_FLAG_RELOAD
	requestFlag |= INTERNET_FLAG_DONT_CACHE
	requestFlag |= INTERNET_FLAG_IGNORE_CERT_DATE_INVALID
	requestFlag |= INTERNET_FLAG_IGNORE_CERT_CN_INVALID
	requestFlag |= INTERNET_FLAG_SECURE

	//インターネットをオープン
	hInet = InternetOpen( "KanColleListMakerKaini", INTERNET_OPEN_TYPE_PRECONFIG, 0, 0, 0)
	if (hInet){

		//タイムアウト 4秒 リトライ数2回
		InternetSetOption hInet, INTERNET_OPTION_CONNECT_TIMEOUT, varptr(connTimeOut), intSize
		InternetSetOption hInet, INTERNET_OPTION_SEND_TIMEOUT, varptr(sendTimeOut), intSize
		InternetSetOption hInet, INTERNET_OPTION_RECEIVE_TIMEOUT, varptr(receiveTimeOut), intSize
		InternetSetOption hInet, INTERNET_OPTION_CONNECT_RETRIES, varptr(connRetry), intSize

		//サーバへ接続
		hConnect = InternetConnect(hInet, serverName, INTERNET_DEFAULT_HTTPS_PORT, 0, 0, INTERNET_SERVICE_HTTP, 0, 0)
		if (hConnect) {
			//リクエストの初期化
			hRequest = HttpOpenRequest(hConnect, method, apiUrl, httpVer, 0, 0, requestFlag, 0)
			if (hRequest) {
				//リクエスト送信
				if (HttpSendRequest(hRequest, RequestHeader, -1, 0, 0)) {
					//ステータスコード取得
					HttpQueryInfo hRequest, HTTP_QUERY_STATUS_CODE | HTTP_QUERY_FLAG_NUMBER, varptr(statCode), varptr(intSize), 0

					if (statCode == 200){
						//入手可能なデータ量を取得
						InternetQueryDataAvailable hRequest, varptr(rsize), 0, 0
						//バッファの初期化
						sdim responseBuffer, rsize+1
						sdim responseBody, rsize+1

						repeat
							InternetReadFile hRequest, varptr(responseBuffer), rsize, varptr(hsize)
							if (hsize = 0) : break
							responseBody += strmid(responseBuffer, 0, hsize)
						loop
					}
				}
				InternetCloseHandle hRequest
			}
			InternetCloseHandle hConnect
		}
		InternetCloseHandle hInet
	}

return statcode

#defcfunc getResponse
return responseBody

#global


*VerCheck

	if autoVersionCheck {

		logOut "バージョンチェック中です。"

		execVerCheck
		if (stat == 200){
			logmes "アップデートファイルの取得成功"
			sdim json
			json = getResponse()
			json_sel json

			logmes "取得したバージョン " + json_val("[0].version")
			if (klm2ver < int(json_val("[0].version"))){

				sdim text,1024
				text =  "艦これ一覧めいかー改二の最新版"+json_val("[0].versionstr")+"が公開されています\n"
				text += json_val("[0].comment")
				text += "\nダウンロードページを開きますか？"

				dialog text,2,"最新版が公開されています"
				if stat = 6{
					exec ""+json_val("[0].distributionurl"),16
				}
			}
			json_unsel
			sdim json
			sdim text
		} else {
			logmes "アップデートファイルの取得失敗"
			dialog "次の原因が考えられます\nアップデート情報配信サーバーのダウン\nインターネット未接続",0,"アップデート情報の取得に失敗しました"
		}

		if (mode == MODE_SSCAP){
			logmessage = "バージョンチェックが完了しました。"
			LogOut logMessage
		}
	}

return
